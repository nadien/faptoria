describe('middleware', function () {
    var Middleware, middleware, next;
    Middleware = require('../src/middleware');
    middleware = null;
    next = null;
    beforeEach(function () {
        next = jasmine.createSpy('next');
    });

    it('should call res.send with snapshotted html if a search engine user-agent is detected', function () {
        var fakeEscapeFragmentUtilities, fakeHtml, fakeHtmlSnapshot, fakeRequest, fakeResponse, fakeSearchEngineDetector;
        fakeHtml = '<html><head></head><body>Hello</body></html>';
        fakeHtmlSnapshot = {
            snapshot: {}
        };
        spyOn(fakeHtmlSnapshot, 'snapshot').andCallFake(function (url, callback) {
            callback(null, fakeHtml);
        });
        fakeSearchEngineDetector = {
            isSearchEngineBot: {}
        };
        spyOn(fakeSearchEngineDetector, 'isSearchEngineBot').andReturn(true);
        fakeEscapeFragmentUtilities = {
            isEscapedRequest: {}
        };
        spyOn(fakeEscapeFragmentUtilities, 'isEscapedRequest').andReturn(false);
        fakeRequest = {
            protocol: 'http',
            originalUrl: '/search?q=openify.it',
            headers: {
                host: 'localhost',
                'user-agent': 'googlebot'
            }
        };
        fakeResponse = {
            send: jasmine.createSpy('res.send')
        };
        middleware = Middleware(fakeHtmlSnapshot, fakeSearchEngineDetector, fakeEscapeFragmentUtilities);
        middleware.execute(fakeRequest, fakeResponse, next);
        expect(next).not.toHaveBeenCalled();
        expect(fakeHtmlSnapshot.snapshot).toHaveBeenCalledWith('http://localhost/search?q=openify.it', jasmine.any(Function));
        expect(fakeResponse.send).toHaveBeenCalledWith(fakeHtml);
    });
    it('should call res.send with snapshotted html if _escaped_fragment_ is detected', function () {
        var fakeEscapeFragmentUtilities, fakeHtml, fakeHtmlSnapshot, fakeRequest, fakeResponse, fakeSearchEngineDetector, fakeUrl;
        fakeHtml = '<html><head></head><body>Hello</body></html>';
        fakeHtmlSnapshot = {
            snapshot: {}
        };
        spyOn(fakeHtmlSnapshot, 'snapshot').andCallFake(function (url, callback) {
            callback(null, fakeHtml);
        });
        fakeSearchEngineDetector = {
            isSearchEngineBot: {}
        };
        spyOn(fakeSearchEngineDetector, 'isSearchEngineBot').andReturn(false);
        fakeEscapeFragmentUtilities = {
            isEscapedRequest: {},
            unescapeRequest: {}
        };
        fakeUrl = 'http://localhost/#!/Home';
        spyOn(fakeEscapeFragmentUtilities, 'isEscapedRequest').andReturn(true);
        spyOn(fakeEscapeFragmentUtilities, 'unescapeRequest').andReturn(fakeUrl);
        fakeRequest = {
            headers: {
                'user-agent': 'webkit'
            }
        };
        fakeResponse = {
            send: jasmine.createSpy('res.send')
        };
        middleware = Middleware(fakeHtmlSnapshot, fakeSearchEngineDetector, fakeEscapeFragmentUtilities);
        middleware.execute(fakeRequest, fakeResponse, next);
        expect(next).not.toHaveBeenCalled();
        expect(fakeHtmlSnapshot.snapshot).toHaveBeenCalledWith(fakeUrl, jasmine.any(Function));
        expect(fakeResponse.send).toHaveBeenCalledWith(fakeHtml);
    });
    it('should call next if not a search engine', function () {
        var fakeEscapeFragmentUtilities, fakeHtmlSnapshot, fakeRequest, fakeResponse, fakeSearchEngineDetector;
        fakeHtmlSnapshot = {
            snapshot: jasmine.createSpy('snapshot')
        };
        fakeSearchEngineDetector = {
            isSearchEngineBot: {}
        };
        spyOn(fakeSearchEngineDetector, 'isSearchEngineBot').andReturn(false);
        fakeEscapeFragmentUtilities = {
            isEscapedRequest: {}
        };
        spyOn(fakeEscapeFragmentUtilities, 'isEscapedRequest').andReturn(false);
        fakeRequest = {
            headers: {
                'user-agent': 'webkit'
            }
        };
        fakeResponse = {
            send: jasmine.createSpy('res.send')
        };
        middleware = Middleware(fakeHtmlSnapshot, fakeSearchEngineDetector, fakeEscapeFragmentUtilities);
        middleware.execute(fakeRequest, fakeResponse, next);
        expect(next).toHaveBeenCalled();
        expect(fakeHtmlSnapshot.snapshot).not.toHaveBeenCalled();
    });
    it('should call next if a search engine user-agent is detected but an error happen in snapshot', function () {
        var fakeEscapeFragmentUtilities, fakeHtmlSnapshot, fakeRequest, fakeResponse, fakeSearchEngineDetector;
        fakeHtmlSnapshot = {
            snapshot: {}
        };
        spyOn(fakeHtmlSnapshot, 'snapshot').andCallFake(function (url, callback) {
            callback(new Error());
        });
        fakeSearchEngineDetector = {
            isSearchEngineBot: {}
        };
        spyOn(fakeSearchEngineDetector, 'isSearchEngineBot').andReturn(true);
        fakeEscapeFragmentUtilities = {
            isEscapedRequest: {}
        };
        spyOn(fakeEscapeFragmentUtilities, 'isEscapedRequest').andReturn(false);
        fakeRequest = {
            protocol: 'http',
            originalUrl: '/search?q=openify.it',
            headers: {
                host: 'localhost',
                'user-agent': 'googlebot'
            }
        };
        fakeResponse = {
            send: jasmine.createSpy('res.send')
        };
        middleware = new Middleware(fakeHtmlSnapshot, fakeSearchEngineDetector, fakeEscapeFragmentUtilities);
        middleware.execute(fakeRequest, fakeResponse, next);
        expect(next).toHaveBeenCalled();
        expect(fakeResponse.send).not.toHaveBeenCalled();
    });
    return it('should call next if _escaped_fragment_ is detected but an error happen in snapshot', function () {
        var fakeEscapeFragmentUtilities, fakeHtmlSnapshot, fakeRequest, fakeResponse, fakeSearchEngineDetector, fakeUrl;
        fakeHtmlSnapshot = {
            snapshot: {}
        };
        spyOn(fakeHtmlSnapshot, 'snapshot').andCallFake(function (url, callback) {
            callback(new Error());
        });
        fakeSearchEngineDetector = {
            isSearchEngineBot: {}
        };
        spyOn(fakeSearchEngineDetector, 'isSearchEngineBot').andReturn(false);
        fakeEscapeFragmentUtilities = {
            isEscapedRequest: {},
            unescapeRequest: {}
        };
        fakeUrl = 'http://localhost/#!/Home';
        spyOn(fakeEscapeFragmentUtilities, 'isEscapedRequest').andReturn(true);
        spyOn(fakeEscapeFragmentUtilities, 'unescapeRequest').andReturn(fakeUrl);
        fakeRequest = {
            headers: {
                'user-agent': 'webkit'
            }
        };
        fakeResponse = {
            send: jasmine.createSpy('res.send')
        };
        middleware = Middleware(fakeHtmlSnapshot, fakeSearchEngineDetector, fakeEscapeFragmentUtilities);
        middleware.execute(fakeRequest, fakeResponse, next);
        expect(next).toHaveBeenCalled();
        expect(fakeResponse.send).not.toHaveBeenCalled();
    });
});
